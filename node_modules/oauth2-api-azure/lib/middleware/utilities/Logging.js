"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
const bunyan_1 = __importDefault(require("bunyan"));
class Telemetry {
    getLoggerInstance() {
        return this.logger.child({}, true);
    }
    logResponse(id, body, statusCode) {
        const log = this.getLoggerInstance().child({
            id,
            body,
            statusCode,
        }, true);
        log.info("response");
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger = bunyan_1.default.createLogger({
                name: "APILogger",
                serializers: {
                    req: require("bunyan-express-serializer"),
                    res: bunyan_1.default.stdSerializers.res,
                    err: bunyan_1.default.stdSerializers.err,
                },
                level: "debug",
                streams: [
                    {
                        level: "debug",
                        stream: process.stdout,
                    },
                ],
            });
        });
    }
    /**
     * trackEvent
     * name: string,
     * event: string
     **/
    trackEvent(name, event) {
        if (this.logger === undefined) {
            this.initialize();
        }
        // Write log
        this.logger.info({ event: name }, event);
    }
    /**
     * trackException
     * exception: Error
     **/
    trackException(exception) {
        if (this.logger === undefined) {
            this.initialize();
        }
        // Write log
        this.logger.error({ error: exception });
    }
    /**
     * trackTrace
     */
    trackTrace(message) {
        if (this.logger === undefined) {
            this.initialize();
        }
        // Write log
        this.logger.trace({ message });
    }
}
exports.Logger = new Telemetry();
//# sourceMappingURL=Logging.js.map