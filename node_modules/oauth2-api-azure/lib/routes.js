"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
const express_1 = __importDefault(require("express"));
const passport_1 = __importDefault(require("passport"));
const Logging_1 = require("./middleware/utilities/Logging");
class AuthRouter {
    constructor(baseApiUrl) {
        this.router = express_1.default.Router();
        this.baseApiUrl = baseApiUrl;
    }
    getRouter() {
        return this.router;
    }
    addAuthRoutes() {
        // Clients get redirected here in order to create an OAuth authorize url and redirect them to AAD.
        // There they will authenticate and give their consent to allow this app access to
        // some resource they own.
        this.router.get("/oauth/signin", (req, res, next) => {
            passport_1.default.authenticate("azuread-openidconnect", (error, user, info) => {
                if (error) {
                    return next(error);
                }
                if (!user) {
                    return res.redirect(`${this.baseApiUrl}/oauth/accessdenied`);
                }
            })(req, res, next);
        });
        // After consent is granted AAD redirects here.  The ADAL library is invoked via the
        // AuthenticationContext and retrieves an access token that can be used to access the
        // user owned resource.
        this.router.post("/oauth/getAToken", passport_1.default.authenticate("azuread-openidconnect", {
            failureRedirect: `${this.baseApiUrl}/oauth/accessdenied`,
        }), (request, response, next) => __awaiter(this, void 0, void 0, function* () {
            if (!request.session) {
                return response.send("Session Cookies are disabled.");
            }
            // redirect to the requested resource
            request.session.idToken = request.body.id_token;
            request.session.authCode = request.body.code;
            response.redirect(request.session.redirectUrl);
        }));
        this.router.get("/oauth/signout", (request, response) => {
            Logging_1.Logger.trackTrace("Signing out");
            request.logout();
            if (request.session) {
                request.session.accessToken = undefined;
                request.session.authCode = undefined;
                request.session.redirectUrl = undefined;
                request.headers.authorization = undefined;
            }
            response.send("Successfully signed out.");
        });
        this.router.get("/oauth/refreshToken", (request, response) => {
            Logging_1.Logger.trackTrace("refreshing token.");
            if (request.session) {
                request.session.authCode = request.session.refresh_token;
                if (request.session.redirectUrl) {
                    response.redirect(request.session.redirectUrl);
                }
                else {
                    response.status(401);
                    response.send("Can redirect to undefined url. Access denied.");
                }
            }
            else {
                response.status(500);
                response.send("Session is not initialized");
            }
        });
        this.router.get("/oauth/accessdenied", (request, response, next) => {
            const err = new Error("Access denied");
            Logging_1.Logger.trackException(err);
            return next(err);
        });
    }
}
exports.AuthRouter = AuthRouter;
//# sourceMappingURL=routes.js.map