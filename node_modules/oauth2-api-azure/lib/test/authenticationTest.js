"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
const express_1 = __importDefault(require("express"));
const express_session_1 = __importDefault(require("express-session"));
const mocha_typescript_1 = require("mocha-typescript");
const chai_1 = __importStar(require("chai"));
const chai_as_promised_1 = __importDefault(require("chai-as-promised"));
const sinon = __importStar(require("sinon"));
const authentication_1 = require("../middleware/security/authentication");
const types_1 = require("../types");
chai_1.default.use(chai_as_promised_1.default);
const app = express_1.default();
app.use(express_1.default.json());
app.use(express_1.default.urlencoded());
app.use(express_session_1.default({
    secret: "HelloOAuth2",
    resave: false,
    saveUninitialized: true,
}));
const authSettings = {
    tenant: "",
    clientId: "23423",
    clientSecret: "23424",
    apiAppId: "sdfsdf",
    redirectUri: "http://ssds",
    validateIssuer: false,
    isB2C: false,
    issuer: "",
    scope: "",
    allowHttpForRedirectUrl: true,
    loggingLevel: "error",
    logginNoPII: false,
    useCookieInsteadOfSession: false,
};
const passportAuthOptions = {
    session: false,
    passReqToCallback: true,
    authInfo: true,
    failureMessage: true,
    failWithError: true,
    successMessage: false,
};
const hostname = "http://localhost";
const baseApiUrl = "/api"; // the based relative uri for this Web API
let OAuthMiddlewareTest = class OAuthMiddlewareTest extends authentication_1.OAuthMiddleware {
    constructor() {
        super(authSettings, passportAuthOptions, hostname, baseApiUrl);
        this.mw = this.authenticate(types_1.SecurityStrategies.BEARER);
    }
    "A middleware setAppHandler should be a function"() {
        chai_1.assert.isFunction(this.setAppHandler(app));
    }
    "A middleware authentication should be a function"() {
        chai_1.assert.isFunction(this.authenticate(types_1.SecurityStrategies.BEARER));
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], OAuthMiddlewareTest.prototype, "A middleware setAppHandler should be a function", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], OAuthMiddlewareTest.prototype, "A middleware authentication should be a function", null);
OAuthMiddlewareTest = __decorate([
    mocha_typescript_1.suite,
    __metadata("design:paramtypes", [])
], OAuthMiddlewareTest);
mocha_typescript_1.suite("request handler calling", () => {
    it("should call next()", () => __awaiter(this, void 0, void 0, function* () {
        const authMiddleware = new OAuthMiddlewareTest();
        const nextSpy = sinon.spy();
        authMiddleware.mw({}, {}, nextSpy);
        return chai_1.assert.isTrue(nextSpy.calledOnce);
    }));
});
//# sourceMappingURL=authenticationTest.js.map