"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
const mocha_typescript_1 = require("mocha-typescript");
const chai_1 = __importStar(require("chai"));
const chai_as_promised_1 = __importDefault(require("chai-as-promised"));
const index_1 = require("../index");
chai_1.default.use(chai_as_promised_1.default);
mocha_typescript_1.suite("test client id", () => {
    mocha_typescript_1.test("authInit() throws an error when missing client id", () => __awaiter(this, void 0, void 0, function* () {
        const authSettings = {
            tenant: "",
            clientId: "",
            clientSecret: "234234",
            apiAppId: "23424",
            redirectUri: "http://sss",
            validateIssuer: false,
            isB2C: false,
            issuer: "",
            scope: "",
            allowHttpForRedirectUrl: true,
            loggingLevel: "error",
            logginNoPII: false,
            useCookieInsteadOfSession: false,
        };
        return chai_1.assert.isRejected(index_1.authInit(authSettings, null));
    }));
    mocha_typescript_1.test("authInit() throws an error when missing client secret", () => __awaiter(this, void 0, void 0, function* () {
        const authSettings = {
            tenant: "",
            clientId: "23423",
            clientSecret: "",
            apiAppId: "23424",
            redirectUri: "http://sss",
            validateIssuer: false,
            isB2C: false,
            issuer: "",
            scope: "",
            allowHttpForRedirectUrl: true,
            loggingLevel: "error",
            logginNoPII: false,
            useCookieInsteadOfSession: false,
        };
        return chai_1.assert.isRejected(index_1.authInit(authSettings, null));
    }));
    mocha_typescript_1.test("authInit() throws an error when redirect Uri is not valid", () => __awaiter(this, void 0, void 0, function* () {
        const authSettings = {
            tenant: "",
            clientId: "23423",
            clientSecret: "23424",
            apiAppId: "sdfsdf",
            redirectUri: "sdfsd",
            validateIssuer: false,
            isB2C: false,
            issuer: "",
            scope: "",
            allowHttpForRedirectUrl: true,
            loggingLevel: "error",
            logginNoPII: false,
            useCookieInsteadOfSession: false,
        };
        return chai_1.assert.isRejected(index_1.authInit(authSettings, null));
    }));
});
//# sourceMappingURL=authInitTest.js.map